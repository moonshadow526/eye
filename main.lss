
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  00000320  000003b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000320  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000068  00800160  00800160  00000414  2**0
                  ALLOC
  3 .stab         0000090c  00000000  00000000  00000414  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000880  00000000  00000000  00000d20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	50 c1       	rjmp	.+672    	; 0x2bc <__vector_13>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	25 c1       	rjmp	.+586    	; 0x270 <__vector_18>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e0 e2       	ldi	r30, 0x20	; 32
  48:	f3 e0       	ldi	r31, 0x03	; 3
  4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
  50:	a0 36       	cpi	r26, 0x60	; 96
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	a0 e6       	ldi	r26, 0x60	; 96
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a8 3c       	cpi	r26, 0xC8	; 200
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	ec d0       	rcall	.+472    	; 0x240 <main>
  68:	59 c1       	rjmp	.+690    	; 0x31c <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <USART_Init>:
volatile unsigned char rxlen = 0;
unsigned char cmdnum = 0;

void USART_Init( unsigned int ubrr)
{
	cli();
  6c:	f8 94       	cli
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
  6e:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
  72:	80 93 c4 00 	sts	0x00C4, r24
	/*Enable receiver and transmitter */
	UCSR0B |= 0x98;
  76:	e1 ec       	ldi	r30, 0xC1	; 193
  78:	f0 e0       	ldi	r31, 0x00	; 0
  7a:	80 81       	ld	r24, Z
  7c:	88 69       	ori	r24, 0x98	; 152
  7e:	80 83       	st	Z, r24
	/* Set frame format: 8data, 1stop bit */
	UCSR0C |= 0x06;
  80:	e2 ec       	ldi	r30, 0xC2	; 194
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	86 60       	ori	r24, 0x06	; 6
  88:	80 83       	st	Z, r24
	sei(); 
  8a:	78 94       	sei
}
  8c:	08 95       	ret

0000008e <USART_Transmit>:

void USART_Transmit( unsigned char data )
{
  8e:	98 2f       	mov	r25, r24
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
  90:	80 91 c0 00 	lds	r24, 0x00C0
  94:	85 ff       	sbrs	r24, 5
  96:	fc cf       	rjmp	.-8      	; 0x90 <USART_Transmit+0x2>
	/* Put data into buffer, sends the data */
		UDR0 = data;
  98:	90 93 c6 00 	sts	0x00C6, r25
}
  9c:	08 95       	ret

0000009e <USART_Receive>:

unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
  9e:	80 91 c0 00 	lds	r24, 0x00C0
  a2:	87 ff       	sbrs	r24, 7
  a4:	fc cf       	rjmp	.-8      	; 0x9e <USART_Receive>
	/* Get and return received data from buffer */
	return UDR0;
  a6:	80 91 c6 00 	lds	r24, 0x00C6
}
  aa:	08 95       	ret

000000ac <USART_Flush>:

void USART_Flush( void )
{
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <USART_Flush+0x6>
	unsigned char dummy;
	while ( UCSR0A & (1<<RXC0) ) 
		dummy = UDR0;
  ae:	80 91 c6 00 	lds	r24, 0x00C6
}

void USART_Flush( void )
{
	unsigned char dummy;
	while ( UCSR0A & (1<<RXC0) ) 
  b2:	80 91 c0 00 	lds	r24, 0x00C0
  b6:	87 fd       	sbrc	r24, 7
  b8:	fa cf       	rjmp	.-12     	; 0xae <USART_Flush+0x2>
		dummy = UDR0;
}
  ba:	08 95       	ret

000000bc <sendstr>:

void sendstr(unsigned char *s)
{
  bc:	fc 01       	movw	r30, r24
  be:	07 c0       	rjmp	.+14     	; 0xce <sendstr+0x12>
}

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
  c0:	80 91 c0 00 	lds	r24, 0x00C0
  c4:	85 ff       	sbrs	r24, 5
  c6:	fc cf       	rjmp	.-8      	; 0xc0 <sendstr+0x4>
	/* Put data into buffer, sends the data */
		UDR0 = data;
  c8:	90 93 c6 00 	sts	0x00C6, r25
void sendstr(unsigned char *s)
{
	while(*s)
	{
		USART_Transmit(*s);
		s++;
  cc:	31 96       	adiw	r30, 0x01	; 1
		dummy = UDR0;
}

void sendstr(unsigned char *s)
{
	while(*s)
  ce:	90 81       	ld	r25, Z
  d0:	99 23       	and	r25, r25
  d2:	b1 f7       	brne	.-20     	; 0xc0 <sendstr+0x4>
	{
		USART_Transmit(*s);
		s++;
	}
}
  d4:	08 95       	ret

000000d6 <time_init>:

void time_init(void)
{
	cli();
  d6:	f8 94       	cli
	TCCR1A=0X00;
  d8:	10 92 80 00 	sts	0x0080, r1
	TCNT1H=0XE5;
  dc:	85 ee       	ldi	r24, 0xE5	; 229
  de:	80 93 85 00 	sts	0x0085, r24
	TCNT1L=0XEE;
  e2:	8e ee       	ldi	r24, 0xEE	; 238
  e4:	80 93 84 00 	sts	0x0084, r24
	TCCR1B=0X01;
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 |= 0x01;
  ee:	ef e6       	ldi	r30, 0x6F	; 111
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	80 83       	st	Z, r24
	sei();
  f8:	78 94       	sei

}
  fa:	08 95       	ret

000000fc <disp_data_shift>:

void disp_data_shift(void)
{
  fc:	df 93       	push	r29
  fe:	cf 93       	push	r28
 100:	00 d0       	rcall	.+0      	; 0x102 <disp_data_shift+0x6>
 102:	00 d0       	rcall	.+0      	; 0x104 <disp_data_shift+0x8>
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62
	int i=0, j=0;
	unsigned char tmpdata[4] = {0};
	
	//data[0][num]<<8|((0x01<<num))
	
	tmpdata[3] = (0x01<<num);
 108:	60 91 c6 01 	lds	r22, 0x01C6
 10c:	70 91 c7 01 	lds	r23, 0x01C7
 110:	21 e0       	ldi	r18, 0x01	; 1
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	06 2e       	mov	r0, r22
 116:	02 c0       	rjmp	.+4      	; 0x11c <disp_data_shift+0x20>
 118:	22 0f       	add	r18, r18
 11a:	33 1f       	adc	r19, r19
 11c:	0a 94       	dec	r0
 11e:	e2 f7       	brpl	.-8      	; 0x118 <disp_data_shift+0x1c>
 120:	2c 83       	std	Y+4, r18	; 0x04
	tmpdata[2] = data[(cmdnum<<1)+1][num];
 122:	a0 91 c5 01 	lds	r26, 0x01C5
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	aa 0f       	add	r26, r26
 12a:	bb 1f       	adc	r27, r27
 12c:	fd 01       	movw	r30, r26
 12e:	31 96       	adiw	r30, 0x01	; 1
 130:	93 e0       	ldi	r25, 0x03	; 3
 132:	ee 0f       	add	r30, r30
 134:	ff 1f       	adc	r31, r31
 136:	9a 95       	dec	r25
 138:	e1 f7       	brne	.-8      	; 0x132 <disp_data_shift+0x36>
 13a:	e6 0f       	add	r30, r22
 13c:	f7 1f       	adc	r31, r23
 13e:	e0 50       	subi	r30, 0x00	; 0
 140:	ff 4f       	sbci	r31, 0xFF	; 255
 142:	80 81       	ld	r24, Z
 144:	8b 83       	std	Y+3, r24	; 0x03
	tmpdata[1] = (0x01<<num);
 146:	2a 83       	std	Y+2, r18	; 0x02
	tmpdata[0] = data[(cmdnum<<1)][num];
 148:	83 e0       	ldi	r24, 0x03	; 3
 14a:	aa 0f       	add	r26, r26
 14c:	bb 1f       	adc	r27, r27
 14e:	8a 95       	dec	r24
 150:	e1 f7       	brne	.-8      	; 0x14a <disp_data_shift+0x4e>
 152:	a6 0f       	add	r26, r22
 154:	b7 1f       	adc	r27, r23
 156:	a0 50       	subi	r26, 0x00	; 0
 158:	bf 4f       	sbci	r27, 0xFF	; 255
 15a:	8c 91       	ld	r24, X
 15c:	89 83       	std	Y+1, r24	; 0x01
 15e:	fe 01       	movw	r30, r28
 160:	31 96       	adiw	r30, 0x01	; 1
 162:	40 e0       	ldi	r20, 0x00	; 0
 164:	50 e0       	ldi	r21, 0x00	; 0
 166:	2e c0       	rjmp	.+92     	; 0x1c4 <disp_data_shift+0xc8>
 168:	80 81       	ld	r24, Z
	{
		
		
		for(j=0; j<8; j++)
		{
			if(i < 2)
 16a:	42 30       	cpi	r20, 0x02	; 2
 16c:	51 05       	cpc	r21, r1
 16e:	84 f4       	brge	.+32     	; 0x190 <disp_data_shift+0x94>
			{
				if ((tmpdata[i]<<j)&0x80)
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	02 2e       	mov	r0, r18
 174:	02 c0       	rjmp	.+4      	; 0x17a <disp_data_shift+0x7e>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	0a 94       	dec	r0
 17c:	e2 f7       	brpl	.-8      	; 0x176 <disp_data_shift+0x7a>
 17e:	87 ff       	sbrs	r24, 7
 180:	02 c0       	rjmp	.+4      	; 0x186 <disp_data_shift+0x8a>
				{
				//	PORTB |= 1<<PB2;
					PORTD |= 1<<2;
 182:	5a 9a       	sbi	0x0b, 2	; 11
 184:	02 c0       	rjmp	.+4      	; 0x18a <disp_data_shift+0x8e>
				}
				else
				{
				//	PORTB &= 0<<PB2;
					PORTD &= 0<<2;
 186:	8b b1       	in	r24, 0x0b	; 11
 188:	1b b8       	out	0x0b, r1	; 11
				}
				RSH_REG_LOW;
 18a:	5c 98       	cbi	0x0b, 4	; 11
				RSH_REG_HIGH;
 18c:	5c 9a       	sbi	0x0b, 4	; 11
 18e:	0f c0       	rjmp	.+30     	; 0x1ae <disp_data_shift+0xb2>
			}
			
			else
			{
				if ((tmpdata[i]<<j)&0x80)
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 2e       	mov	r0, r18
 194:	02 c0       	rjmp	.+4      	; 0x19a <disp_data_shift+0x9e>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	0a 94       	dec	r0
 19c:	e2 f7       	brpl	.-8      	; 0x196 <disp_data_shift+0x9a>
 19e:	87 ff       	sbrs	r24, 7
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <disp_data_shift+0xaa>
				{
					PORTB |= 1<<PB2;
 1a2:	2a 9a       	sbi	0x05, 2	; 5
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <disp_data_shift+0xae>
				//	PORTD |= 1<<2;
				}
				else
				{
					PORTB &= 0<<PB2;
 1a6:	85 b1       	in	r24, 0x05	; 5
 1a8:	15 b8       	out	0x05, r1	; 5
				//	PORTD &= 0<<2;
				}	
				LSH_REG_LOW;
 1aa:	28 98       	cbi	0x05, 0	; 5
				LSH_REG_HIGH;
 1ac:	28 9a       	sbi	0x05, 0	; 5
	
	for(i=0; i<4; i++)
	{
		
		
		for(j=0; j<8; j++)
 1ae:	2f 5f       	subi	r18, 0xFF	; 255
 1b0:	3f 4f       	sbci	r19, 0xFF	; 255
 1b2:	28 30       	cpi	r18, 0x08	; 8
 1b4:	31 05       	cpc	r19, r1
 1b6:	c1 f6       	brne	.-80     	; 0x168 <disp_data_shift+0x6c>
	tmpdata[2] = data[(cmdnum<<1)+1][num];
	tmpdata[1] = (0x01<<num);
	tmpdata[0] = data[(cmdnum<<1)][num];
	
	
	for(i=0; i<4; i++)
 1b8:	4f 5f       	subi	r20, 0xFF	; 255
 1ba:	5f 4f       	sbci	r21, 0xFF	; 255
 1bc:	31 96       	adiw	r30, 0x01	; 1
 1be:	44 30       	cpi	r20, 0x04	; 4
 1c0:	51 05       	cpc	r21, r1
 1c2:	19 f0       	breq	.+6      	; 0x1ca <disp_data_shift+0xce>
 1c4:	20 e0       	ldi	r18, 0x00	; 0
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	cf cf       	rjmp	.-98     	; 0x168 <disp_data_shift+0x6c>
			}
		
		}
		
	}
		LST_REG_LOW;
 1ca:	29 98       	cbi	0x05, 1	; 5
		LST_REG_HIGH;
 1cc:	29 9a       	sbi	0x05, 1	; 5
		
		RST_REG_LOW;
 1ce:	5b 98       	cbi	0x0b, 3	; 11
		RST_REG_HIGH;
 1d0:	5b 9a       	sbi	0x0b, 3	; 11
		num++;
 1d2:	cb 01       	movw	r24, r22
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	90 93 c7 01 	sts	0x01C7, r25
 1da:	80 93 c6 01 	sts	0x01C6, r24
	if(num > 7)
 1de:	08 97       	sbiw	r24, 0x08	; 8
 1e0:	24 f0       	brlt	.+8      	; 0x1ea <disp_data_shift+0xee>
		num = 0;
 1e2:	10 92 c7 01 	sts	0x01C7, r1
 1e6:	10 92 c6 01 	sts	0x01C6, r1
		
}
 1ea:	0f 90       	pop	r0
 1ec:	0f 90       	pop	r0
 1ee:	0f 90       	pop	r0
 1f0:	0f 90       	pop	r0
 1f2:	cf 91       	pop	r28
 1f4:	df 91       	pop	r29
 1f6:	08 95       	ret

000001f8 <cal_checksum>:

unsigned char cal_checksum(unsigned char *pdata,unsigned int len)
{
 1f8:	dc 01       	movw	r26, r24
 1fa:	20 e0       	ldi	r18, 0x00	; 0
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	40 e0       	ldi	r20, 0x00	; 0
 200:	07 c0       	rjmp	.+14     	; 0x210 <cal_checksum+0x18>
	int i = 0;
	unsigned char checksum = 0;
	for(i = 0; i<len; i++)
	{
		checksum += pdata[i];
 202:	fd 01       	movw	r30, r26
 204:	e2 0f       	add	r30, r18
 206:	f3 1f       	adc	r31, r19
 208:	80 81       	ld	r24, Z
 20a:	48 0f       	add	r20, r24

unsigned char cal_checksum(unsigned char *pdata,unsigned int len)
{
	int i = 0;
	unsigned char checksum = 0;
	for(i = 0; i<len; i++)
 20c:	2f 5f       	subi	r18, 0xFF	; 255
 20e:	3f 4f       	sbci	r19, 0xFF	; 255
 210:	26 17       	cp	r18, r22
 212:	37 07       	cpc	r19, r23
 214:	b0 f3       	brcs	.-20     	; 0x202 <cal_checksum+0xa>
	{
		checksum += pdata[i];
	}
	return checksum;
}
 216:	84 2f       	mov	r24, r20
 218:	08 95       	ret

0000021a <cmd_proc>:

void cmd_proc(void)
{
	int i;
	unsigned char checksum = 0;
	if(0x5a == rx_buff[0])
 21a:	80 91 60 01 	lds	r24, 0x0160
 21e:	8a 35       	cpi	r24, 0x5A	; 90
 220:	71 f4       	brne	.+28     	; 0x23e <cmd_proc+0x24>
{
	int i = 0;
	unsigned char checksum = 0;
	for(i = 0; i<len; i++)
	{
		checksum += pdata[i];
 222:	20 91 62 01 	lds	r18, 0x0162
	int i;
	unsigned char checksum = 0;
	if(0x5a == rx_buff[0])
	{
		checksum = cal_checksum(&(rx_buff[1]),2);
		if(checksum == rx_buff[3])
 226:	80 91 61 01 	lds	r24, 0x0161
 22a:	82 0f       	add	r24, r18
 22c:	90 91 63 01 	lds	r25, 0x0163
 230:	89 17       	cp	r24, r25
 232:	29 f4       	brne	.+10     	; 0x23e <cmd_proc+0x24>
		{
			cmdnum = rx_buff[2];
 234:	20 93 c5 01 	sts	0x01C5, r18
			sendstr(rx_buff);
 238:	80 e6       	ldi	r24, 0x60	; 96
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	3f df       	rcall	.-386    	; 0xbc <sendstr>
 23e:	08 95       	ret

00000240 <main>:
	
	
	unsigned char rec;
	int i;
	
	DDRB |=0x07;
 240:	84 b1       	in	r24, 0x04	; 4
 242:	87 60       	ori	r24, 0x07	; 7
 244:	84 b9       	out	0x04, r24	; 4
	DDRD |=0x1C;
 246:	8a b1       	in	r24, 0x0a	; 10
 248:	8c 61       	ori	r24, 0x1C	; 28
 24a:	8a b9       	out	0x0a, r24	; 10
	PORTB &=0xF8;
 24c:	85 b1       	in	r24, 0x05	; 5
 24e:	88 7f       	andi	r24, 0xF8	; 248
 250:	85 b9       	out	0x05, r24	; 5
	PORTD &=0xE3;
 252:	8b b1       	in	r24, 0x0b	; 11
 254:	83 7e       	andi	r24, 0xE3	; 227
 256:	8b b9       	out	0x0b, r24	; 11
	USART_Init(UBRR);
 258:	83 e3       	ldi	r24, 0x33	; 51
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	07 df       	rcall	.-498    	; 0x6c <USART_Init>
	time_init();
 25e:	3b df       	rcall	.-394    	; 0xd6 <time_init>
	
	while(1)
	{
		if(5 == rxlen)
 260:	80 91 c4 01 	lds	r24, 0x01C4
 264:	85 30       	cpi	r24, 0x05	; 5
 266:	e1 f7       	brne	.-8      	; 0x260 <main+0x20>
		{
			cmd_proc();
 268:	d8 df       	rcall	.-80     	; 0x21a <cmd_proc>
			rxlen = 0;
 26a:	10 92 c4 01 	sts	0x01C4, r1
 26e:	f8 cf       	rjmp	.-16     	; 0x260 <main+0x20>

00000270 <__vector_18>:



ISR(USART_RX_vect)

{
 270:	1f 92       	push	r1
 272:	0f 92       	push	r0
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	0f 92       	push	r0
 278:	11 24       	eor	r1, r1
 27a:	8f 93       	push	r24
 27c:	ef 93       	push	r30
 27e:	ff 93       	push	r31
	cli();
 280:	f8 94       	cli
	
//	USART_Transmit(UDR0);
	
	if(rxlen < MAX_LEN)
 282:	80 91 c4 01 	lds	r24, 0x01C4
 286:	84 36       	cpi	r24, 0x64	; 100
 288:	70 f4       	brcc	.+28     	; 0x2a6 <__vector_18+0x36>
	{
		rx_buff[rxlen] = UDR0;
 28a:	e0 91 c4 01 	lds	r30, 0x01C4
 28e:	80 91 c6 00 	lds	r24, 0x00C6
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	e0 5a       	subi	r30, 0xA0	; 160
 296:	fe 4f       	sbci	r31, 0xFE	; 254
 298:	80 83       	st	Z, r24
		rxlen++;
 29a:	80 91 c4 01 	lds	r24, 0x01C4
 29e:	8f 5f       	subi	r24, 0xFF	; 255
 2a0:	80 93 c4 01 	sts	0x01C4, r24
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <__vector_18+0x3a>
		
	}
	
	else
	{
		rxlen = 0;
 2a6:	10 92 c4 01 	sts	0x01C4, r1
	}
	
	sei();
 2aa:	78 94       	sei
	
	
}
 2ac:	ff 91       	pop	r31
 2ae:	ef 91       	pop	r30
 2b0:	8f 91       	pop	r24
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <__vector_13>:


ISR(TIMER1_OVF_vect)

{
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	2f 93       	push	r18
 2c8:	3f 93       	push	r19
 2ca:	4f 93       	push	r20
 2cc:	5f 93       	push	r21
 2ce:	6f 93       	push	r22
 2d0:	7f 93       	push	r23
 2d2:	8f 93       	push	r24
 2d4:	9f 93       	push	r25
 2d6:	af 93       	push	r26
 2d8:	bf 93       	push	r27
 2da:	ef 93       	push	r30
 2dc:	ff 93       	push	r31
	
	cli();
 2de:	f8 94       	cli
	TCCR1B=0X00;
 2e0:	e1 e8       	ldi	r30, 0x81	; 129
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	10 82       	st	Z, r1
	TCNT1H=0XE5;
 2e6:	85 ee       	ldi	r24, 0xE5	; 229
 2e8:	80 93 85 00 	sts	0x0085, r24
	TCNT1L=0XEE;
 2ec:	8e ee       	ldi	r24, 0xEE	; 238
 2ee:	80 93 84 00 	sts	0x0084, r24
	TCCR1B=0X01;
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	80 83       	st	Z, r24
	sei();
 2f6:	78 94       	sei
	disp_data_shift();
 2f8:	01 df       	rcall	.-510    	; 0xfc <disp_data_shift>

}
 2fa:	ff 91       	pop	r31
 2fc:	ef 91       	pop	r30
 2fe:	bf 91       	pop	r27
 300:	af 91       	pop	r26
 302:	9f 91       	pop	r25
 304:	8f 91       	pop	r24
 306:	7f 91       	pop	r23
 308:	6f 91       	pop	r22
 30a:	5f 91       	pop	r21
 30c:	4f 91       	pop	r20
 30e:	3f 91       	pop	r19
 310:	2f 91       	pop	r18
 312:	0f 90       	pop	r0
 314:	0f be       	out	0x3f, r0	; 63
 316:	0f 90       	pop	r0
 318:	1f 90       	pop	r1
 31a:	18 95       	reti

0000031c <_exit>:
 31c:	f8 94       	cli

0000031e <__stop_program>:
 31e:	ff cf       	rjmp	.-2      	; 0x31e <__stop_program>
